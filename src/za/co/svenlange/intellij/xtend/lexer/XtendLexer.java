/* The following code was generated by JFlex 1.4.3 on 3/22/13 2:04 PM */

package za.co.svenlange.intellij.xtend.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import za.co.svenlange.intellij.xtend.psi.XtendTypes;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/22/13 2:04 PM from the specification file
 * <tt>/Users/lange/Projekte/opensource/jetbrains/xtend-intellij/src/za/co/svenlange/intellij/xtend/lexer/xtend.flex</tt>
 */
public final class XtendLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\53"+
    "\1\13\1\0\1\6\1\53\1\54\1\14\1\46\1\46\1\5\1\56"+
    "\1\46\1\57\1\46\1\4\1\10\11\11\1\47\1\46\1\52\1\50"+
    "\1\51\1\46\1\0\13\6\1\12\16\6\1\46\1\15\1\46\1\53"+
    "\1\6\1\0\1\22\1\16\1\30\1\35\1\21\1\37\1\40\1\32"+
    "\1\33\1\6\1\25\1\20\1\45\1\23\1\17\1\42\1\6\1\24"+
    "\1\31\1\27\1\34\1\41\1\43\1\36\1\26\1\44\1\46\1\55"+
    "\1\46\1\46\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0"+
    "\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0"+
    "\162\6\4\0\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0"+
    "\23\7\12\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0"+
    "\4\7\3\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0"+
    "\46\6\2\0\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0"+
    "\3\6\15\0\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7"+
    "\7\0\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0"+
    "\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6"+
    "\17\0\1\7\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6"+
    "\13\7\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0"+
    "\1\6\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0"+
    "\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6"+
    "\14\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0"+
    "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7"+
    "\1\0\4\7\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\4\0\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6"+
    "\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6"+
    "\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6"+
    "\4\0\12\7\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0"+
    "\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6"+
    "\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7"+
    "\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\42\6\6\0\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7"+
    "\11\0\1\7\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7"+
    "\3\0\4\7\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0"+
    "\51\6\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0"+
    "\77\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0"+
    "\125\6\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0"+
    "\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0"+
    "\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6"+
    "\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7"+
    "\2\0\12\7\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0"+
    "\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6"+
    "\224\0\234\6\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6"+
    "\13\0\4\7\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6"+
    "\36\0\15\7\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6"+
    "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6"+
    "\5\0\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\137\6\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0"+
    "\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0"+
    "\73\6\225\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0"+
    "\20\7\20\0\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0"+
    "\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0"+
    "\32\6\4\0\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0"+
    "\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\3\3\2\4\1\5\31\3\1\6"+
    "\2\7\1\10\1\1\2\0\1\4\31\3\1\11\1\3"+
    "\1\11\16\3\1\12\1\13\2\14\2\0\26\3\1\11"+
    "\3\3\1\11\12\3\1\0\1\14\43\3\1\11\31\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\140\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\140\0\u04e0\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\140\0\140\0\u0690"+
    "\0\u06c0\0\u06f0\0\140\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0120\0\u0bd0\0\u0c00\0\u0c30"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\140\0\140\0\u0ed0"+
    "\0\140\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020"+
    "\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0"+
    "\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320"+
    "\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620"+
    "\0\u1650\0\u0f00\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770"+
    "\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0"+
    "\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70"+
    "\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0"+
    "\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70"+
    "\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0"+
    "\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070"+
    "\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190\0\u21c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\7\1\12\2\3\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\7\1\22\1\23\1\24\1\7\1\25"+
    "\1\7\1\26\1\7\1\27\1\30\1\31\1\32\1\33"+
    "\2\7\1\34\1\35\1\6\1\36\1\37\1\6\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\10\44\1\47"+
    "\1\44\1\50\42\44\61\0\3\4\60\0\1\51\1\52"+
    "\42\0\1\34\57\0\1\34\15\0\5\7\3\0\30\7"+
    "\24\0\1\53\5\0\1\53\47\0\2\11\1\53\5\0"+
    "\1\53\45\0\5\7\3\0\1\7\1\54\4\7\1\55"+
    "\1\7\1\56\17\7\20\0\5\7\3\0\23\7\1\57"+
    "\4\7\20\0\5\7\3\0\1\7\1\60\26\7\20\0"+
    "\5\7\3\0\2\7\1\61\15\7\1\62\7\7\20\0"+
    "\5\7\3\0\1\63\27\7\20\0\5\7\3\0\3\7"+
    "\1\64\1\65\11\7\1\66\11\7\20\0\5\7\3\0"+
    "\3\7\1\67\24\7\20\0\5\7\3\0\6\7\1\70"+
    "\5\7\1\71\13\7\20\0\5\7\3\0\1\7\1\72"+
    "\1\73\1\7\1\74\1\7\1\75\5\7\1\76\13\7"+
    "\20\0\5\7\3\0\10\7\1\77\1\100\2\7\1\101"+
    "\1\7\1\102\6\7\1\103\2\7\20\0\5\7\3\0"+
    "\5\7\1\104\13\7\1\105\5\7\1\106\20\0\5\7"+
    "\3\0\1\7\1\107\1\7\1\110\11\7\1\111\12\7"+
    "\20\0\5\7\3\0\1\7\1\112\1\113\1\7\1\114"+
    "\10\7\1\115\12\7\20\0\5\7\3\0\1\7\1\116"+
    "\26\7\20\0\5\7\3\0\1\7\1\117\2\7\1\120"+
    "\23\7\20\0\5\7\3\0\4\7\1\121\1\7\1\122"+
    "\7\7\1\123\11\7\20\0\5\7\3\0\14\7\1\124"+
    "\13\7\61\0\1\34\60\0\1\34\1\125\56\0\1\34"+
    "\1\0\1\6\55\0\1\34\3\0\1\34\53\0\1\34"+
    "\4\0\1\34\52\0\1\34\5\0\1\34\51\0\1\34"+
    "\6\0\1\34\1\44\2\0\10\44\1\0\1\44\1\0"+
    "\42\44\2\0\1\46\55\0\2\126\1\0\10\126\4\127"+
    "\4\126\2\127\2\126\1\127\7\126\1\127\20\126\1\51"+
    "\1\130\1\131\55\51\5\132\1\133\52\132\6\0\5\7"+
    "\3\0\1\7\1\134\26\7\20\0\5\7\3\0\3\7"+
    "\1\135\24\7\20\0\5\7\3\0\11\7\1\136\16\7"+
    "\20\0\5\7\3\0\3\7\1\137\24\7\20\0\5\7"+
    "\3\0\5\7\1\140\22\7\20\0\5\7\3\0\13\7"+
    "\1\136\14\7\20\0\5\7\3\0\11\7\1\141\16\7"+
    "\20\0\5\7\3\0\13\7\1\142\14\7\20\0\5\7"+
    "\3\0\25\7\1\105\2\7\20\0\5\7\3\0\11\7"+
    "\1\143\16\7\20\0\5\7\3\0\2\7\1\144\25\7"+
    "\20\0\5\7\3\0\11\7\1\145\16\7\20\0\5\7"+
    "\3\0\4\7\1\146\11\7\1\136\11\7\20\0\5\7"+
    "\3\0\6\7\1\147\6\7\1\150\12\7\20\0\5\7"+
    "\3\0\5\7\1\151\22\7\20\0\5\7\3\0\4\7"+
    "\1\152\23\7\20\0\5\7\3\0\11\7\1\153\1\7"+
    "\1\136\14\7\20\0\5\7\3\0\3\7\1\154\24\7"+
    "\20\0\5\7\3\0\4\7\1\112\23\7\20\0\5\7"+
    "\3\0\5\7\1\155\22\7\20\0\5\7\3\0\4\7"+
    "\1\156\23\7\20\0\5\7\3\0\1\7\1\157\26\7"+
    "\20\0\5\7\3\0\24\7\1\160\3\7\20\0\5\7"+
    "\3\0\15\7\1\161\12\7\20\0\5\7\3\0\11\7"+
    "\1\162\1\7\1\163\14\7\20\0\5\7\3\0\24\7"+
    "\1\164\3\7\20\0\5\7\3\0\16\7\1\165\11\7"+
    "\20\0\5\7\3\0\21\7\1\166\6\7\20\0\5\7"+
    "\3\0\13\7\1\167\14\7\20\0\5\7\3\0\6\7"+
    "\1\105\21\7\20\0\5\7\3\0\1\7\1\170\26\7"+
    "\20\0\5\7\3\0\2\7\1\61\25\7\20\0\5\7"+
    "\3\0\5\7\1\171\22\7\20\0\5\7\3\0\11\7"+
    "\1\172\16\7\20\0\5\7\3\0\15\7\1\173\12\7"+
    "\20\0\5\7\3\0\2\7\1\105\3\7\1\105\21\7"+
    "\20\0\5\7\3\0\12\7\1\174\15\7\20\0\5\7"+
    "\3\0\1\7\1\175\13\7\1\176\12\7\20\0\5\7"+
    "\3\0\1\177\27\7\20\0\5\7\3\0\15\7\1\200"+
    "\12\7\62\0\1\34\1\6\10\0\1\131\55\0\5\132"+
    "\1\201\56\132\1\202\1\201\52\132\6\0\5\7\3\0"+
    "\2\7\1\203\25\7\20\0\5\7\3\0\4\7\1\204"+
    "\23\7\20\0\5\7\3\0\3\7\1\105\24\7\20\0"+
    "\5\7\3\0\6\7\1\205\21\7\20\0\5\7\3\0"+
    "\22\7\1\105\5\7\20\0\5\7\3\0\3\7\1\206"+
    "\24\7\20\0\5\7\3\0\11\7\1\207\16\7\20\0"+
    "\5\7\3\0\15\7\1\210\12\7\20\0\5\7\3\0"+
    "\2\7\1\105\25\7\20\0\5\7\3\0\16\7\1\211"+
    "\11\7\20\0\5\7\3\0\5\7\1\212\22\7\20\0"+
    "\5\7\3\0\1\7\1\213\26\7\20\0\5\7\3\0"+
    "\13\7\1\105\14\7\20\0\5\7\3\0\11\7\1\214"+
    "\1\7\1\215\14\7\20\0\5\7\3\0\13\7\1\150"+
    "\14\7\20\0\5\7\3\0\12\7\1\216\15\7\20\0"+
    "\5\7\3\0\4\7\1\56\23\7\20\0\5\7\3\0"+
    "\12\7\1\217\15\7\20\0\5\7\3\0\11\7\1\220"+
    "\16\7\20\0\5\7\3\0\6\7\1\215\21\7\20\0"+
    "\5\7\3\0\3\7\1\112\24\7\20\0\5\7\3\0"+
    "\11\7\1\153\16\7\20\0\5\7\3\0\3\7\1\221"+
    "\24\7\20\0\5\7\3\0\11\7\1\222\16\7\20\0"+
    "\5\7\3\0\1\7\1\157\1\223\25\7\20\0\5\7"+
    "\3\0\1\200\27\7\20\0\5\7\3\0\4\7\1\224"+
    "\23\7\20\0\5\7\3\0\24\7\1\225\3\7\20\0"+
    "\5\7\3\0\4\7\1\215\23\7\20\0\5\7\3\0"+
    "\4\7\1\226\23\7\20\0\5\7\3\0\1\7\1\105"+
    "\26\7\20\0\5\7\3\0\17\7\1\105\10\7\20\0"+
    "\5\7\3\0\7\7\1\227\20\7\20\0\5\7\3\0"+
    "\11\7\1\230\16\7\20\0\5\7\3\0\23\7\1\154"+
    "\4\7\20\0\5\7\3\0\2\7\1\220\25\7\20\0"+
    "\5\7\3\0\2\7\1\136\25\7\12\0\4\132\1\131"+
    "\1\201\52\132\6\0\5\7\3\0\3\7\1\231\24\7"+
    "\20\0\5\7\3\0\7\7\1\105\20\7\20\0\5\7"+
    "\3\0\6\7\1\232\21\7\20\0\5\7\3\0\5\7"+
    "\1\233\22\7\20\0\5\7\3\0\6\7\1\234\21\7"+
    "\20\0\5\7\3\0\23\7\1\136\4\7\20\0\5\7"+
    "\3\0\6\7\1\235\21\7\20\0\5\7\3\0\13\7"+
    "\1\236\14\7\20\0\5\7\3\0\25\7\1\150\2\7"+
    "\20\0\5\7\3\0\15\7\1\237\12\7\20\0\5\7"+
    "\3\0\11\7\1\105\16\7\20\0\5\7\3\0\14\7"+
    "\1\105\13\7\20\0\5\7\3\0\14\7\1\240\13\7"+
    "\20\0\5\7\3\0\15\7\1\241\12\7\20\0\5\7"+
    "\3\0\6\7\1\242\21\7\20\0\5\7\3\0\4\7"+
    "\1\243\23\7\20\0\5\7\3\0\3\7\1\244\24\7"+
    "\20\0\5\7\3\0\16\7\1\245\11\7\20\0\5\7"+
    "\3\0\4\7\1\161\23\7\20\0\5\7\3\0\2\7"+
    "\1\246\25\7\20\0\5\7\3\0\4\7\1\247\23\7"+
    "\20\0\5\7\3\0\3\7\1\250\24\7\20\0\5\7"+
    "\3\0\4\7\1\235\23\7\20\0\5\7\3\0\15\7"+
    "\1\251\12\7\20\0\5\7\3\0\13\7\1\252\3\7"+
    "\1\150\10\7\20\0\5\7\3\0\4\7\1\253\23\7"+
    "\20\0\5\7\3\0\5\7\1\105\22\7\20\0\5\7"+
    "\3\0\15\7\1\254\12\7\20\0\5\7\3\0\5\7"+
    "\1\255\22\7\20\0\5\7\3\0\6\7\1\256\21\7"+
    "\20\0\5\7\3\0\12\7\1\105\15\7\20\0\5\7"+
    "\3\0\21\7\1\257\6\7\20\0\5\7\3\0\5\7"+
    "\1\260\22\7\20\0\5\7\3\0\27\7\1\261\20\0"+
    "\5\7\3\0\2\7\1\215\25\7\20\0\5\7\3\0"+
    "\2\7\1\262\25\7\20\0\5\7\3\0\22\7\1\136"+
    "\5\7\20\0\5\7\3\0\12\7\1\263\15\7\20\0"+
    "\5\7\3\0\17\7\1\136\10\7\20\0\5\7\3\0"+
    "\15\7\1\264\12\7\20\0\5\7\3\0\12\7\1\215"+
    "\15\7\20\0\5\7\3\0\3\7\1\265\24\7\20\0"+
    "\5\7\3\0\16\7\1\136\11\7\20\0\5\7\3\0"+
    "\1\7\1\266\26\7\20\0\5\7\3\0\4\7\1\267"+
    "\23\7\20\0\5\7\3\0\12\7\1\270\15\7\20\0"+
    "\5\7\3\0\3\7\1\271\24\7\20\0\5\7\3\0"+
    "\10\7\1\105\17\7\20\0\5\7\3\0\11\7\1\272"+
    "\16\7\20\0\5\7\3\0\1\7\1\235\26\7\20\0"+
    "\5\7\3\0\5\7\1\215\22\7\20\0\5\7\3\0"+
    "\5\7\1\273\22\7\20\0\5\7\3\0\12\7\1\136"+
    "\15\7\20\0\5\7\3\0\3\7\1\274\24\7\20\0"+
    "\5\7\3\0\5\7\1\275\22\7\20\0\5\7\3\0"+
    "\3\7\1\173\24\7\20\0\5\7\3\0\15\7\1\276"+
    "\12\7\20\0\5\7\3\0\1\7\1\277\26\7\20\0"+
    "\5\7\3\0\11\7\1\150\16\7\20\0\5\7\3\0"+
    "\26\7\1\272\1\7\20\0\5\7\3\0\21\7\1\105"+
    "\6\7\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8688];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\1\11\21\1\1\11\11\1\2\11"+
    "\1\1\2\0\1\11\52\1\2\11\1\1\1\11\2\0"+
    "\45\1\1\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  public XtendLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public XtendLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1764) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [188] { /**/ }");
          { /**/
          }
        case 13: break;
        case 11: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [196] { return XtendTypes.STRING; }");
          { return XtendTypes.STRING;
          }
        case 14: break;
        case 7: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [202] { throw new RuntimeException(\"Unterminated string at end of line\"); }");
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 15: break;
        case 4: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [163] { return XtendTypes.INTEGERLITERAL; }");
          { return XtendTypes.INTEGERLITERAL;
          }
        case 16: break;
        case 8: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [186] { yybegin(YYINITIAL); return XtendTypes.STRING; }");
          { yybegin(YYINITIAL); return XtendTypes.STRING;
          }
        case 17: break;
        case 10: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [201] { throw new RuntimeException(\"Illegal escape sequence \\\"\"+yytext()+\"\\\"\"); }");
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 18: break;
        case 9: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [67] { return XtendTypes.KEYWORD; }");
          { return XtendTypes.KEYWORD;
          }
        case 19: break;
        case 1: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [206] { return TokenType.BAD_CHARACTER; }");
          { return TokenType.BAD_CHARACTER;
          }
        case 20: break;
        case 5: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [160] { yybegin(STRING); }");
          { yybegin(STRING);
          }
        case 21: break;
        case 12: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [179] { return XtendTypes.COMMENT; }");
          { return XtendTypes.COMMENT;
          }
        case 22: break;
        case 2: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [182] { return TokenType.WHITE_SPACE; }");
          { return TokenType.WHITE_SPACE;
          }
        case 23: break;
        case 3: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [139] { return XtendTypes.BUCHSTABEN; }");
          { return XtendTypes.BUCHSTABEN;
          }
        case 24: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java XtendLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        XtendLexer scanner = null;
        try {
          scanner = new XtendLexer( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
