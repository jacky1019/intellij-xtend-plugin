/* The following code was generated by JFlex 1.4.3 on 3/22/13 1:52 PM */

package za.co.svenlange.intellij.xtend.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import za.co.svenlange.intellij.xtend.psi.XtendTypes;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/22/13 1:52 PM from the specification file
 * <tt>/Users/lange/Projekte/opensource/jetbrains/xtend-intellij/src/za/co/svenlange/intellij/xtend/lexer/Xtend.flex</tt>
 */
public final class XtendLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\52"+
    "\1\12\1\0\1\6\1\52\1\53\1\13\1\45\1\45\1\5\1\55"+
    "\1\45\1\56\1\45\1\4\1\10\11\11\1\46\1\45\1\51\1\47"+
    "\1\50\1\45\1\0\32\6\1\45\1\14\1\45\1\52\1\6\1\0"+
    "\1\21\1\15\1\27\1\34\1\20\1\36\1\37\1\31\1\32\1\6"+
    "\1\24\1\17\1\44\1\22\1\16\1\41\1\6\1\23\1\30\1\26"+
    "\1\33\1\40\1\42\1\35\1\25\1\43\1\45\1\54\1\45\1\45"+
    "\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0"+
    "\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0"+
    "\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0"+
    "\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0"+
    "\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0"+
    "\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0"+
    "\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7"+
    "\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6"+
    "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7"+
    "\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6"+
    "\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7"+
    "\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0"+
    "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0"+
    "\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7"+
    "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7"+
    "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0"+
    "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7"+
    "\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0"+
    "\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7"+
    "\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7"+
    "\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0"+
    "\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0"+
    "\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0"+
    "\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7"+
    "\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0"+
    "\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7"+
    "\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0"+
    "\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6"+
    "\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7"+
    "\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7"+
    "\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6"+
    "\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0"+
    "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0"+
    "\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
    "\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\5\3\1\4\30\3\1\5\2\6"+
    "\1\7\1\1\2\0\31\3\1\10\1\3\1\10\16\3"+
    "\1\11\1\12\2\13\2\0\26\3\1\10\3\3\1\10"+
    "\12\3\1\0\1\13\43\3\1\10\31\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\136"+
    "\0\u0149\0\136\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\136\0\136\0\u063e\0\u066d"+
    "\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5"+
    "\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d"+
    "\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u011a\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96"+
    "\0\u0dc5\0\u0df4\0\u0e23\0\136\0\136\0\u0e52\0\136\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u0e81"+
    "\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722"+
    "\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a"+
    "\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12"+
    "\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02"+
    "\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a"+
    "\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2"+
    "\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\2\3\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\2\7\1\22\1\23\1\24\1\7\1\25\1\7"+
    "\1\26\1\7\1\27\1\30\1\31\1\32\1\33\2\7"+
    "\1\10\1\34\1\6\1\35\1\36\1\6\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\7\43\1\46\1\43"+
    "\1\47\42\43\60\0\3\4\57\0\1\50\1\51\41\0"+
    "\1\10\56\0\1\10\15\0\4\7\3\0\30\7\22\0"+
    "\2\11\53\0\4\7\3\0\1\7\1\52\4\7\1\53"+
    "\1\7\1\54\17\7\20\0\4\7\3\0\23\7\1\55"+
    "\4\7\20\0\4\7\3\0\1\7\1\56\26\7\20\0"+
    "\4\7\3\0\2\7\1\57\15\7\1\60\7\7\20\0"+
    "\4\7\3\0\1\61\27\7\20\0\4\7\3\0\3\7"+
    "\1\62\1\63\11\7\1\64\11\7\20\0\4\7\3\0"+
    "\3\7\1\65\24\7\20\0\4\7\3\0\6\7\1\66"+
    "\5\7\1\67\13\7\20\0\4\7\3\0\1\7\1\70"+
    "\1\71\1\7\1\72\1\7\1\73\5\7\1\74\13\7"+
    "\20\0\4\7\3\0\10\7\1\75\1\76\2\7\1\77"+
    "\1\7\1\100\6\7\1\101\2\7\20\0\4\7\3\0"+
    "\5\7\1\102\13\7\1\103\5\7\1\104\20\0\4\7"+
    "\3\0\1\7\1\105\1\7\1\106\11\7\1\107\12\7"+
    "\20\0\4\7\3\0\1\7\1\110\1\111\1\7\1\112"+
    "\10\7\1\113\12\7\20\0\4\7\3\0\1\7\1\114"+
    "\26\7\20\0\4\7\3\0\1\7\1\115\2\7\1\116"+
    "\23\7\20\0\4\7\3\0\4\7\1\117\1\7\1\120"+
    "\7\7\1\121\11\7\20\0\4\7\3\0\14\7\1\122"+
    "\13\7\60\0\1\10\57\0\1\10\1\123\55\0\1\10"+
    "\1\0\1\6\54\0\1\10\3\0\1\10\52\0\1\10"+
    "\4\0\1\10\51\0\1\10\5\0\1\10\50\0\1\10"+
    "\6\0\1\10\1\43\2\0\7\43\1\0\1\43\1\0"+
    "\42\43\2\0\1\45\54\0\2\124\1\0\7\124\4\125"+
    "\4\124\2\125\2\124\1\125\7\124\1\125\20\124\1\50"+
    "\1\126\1\127\54\50\5\130\1\131\51\130\6\0\4\7"+
    "\3\0\1\7\1\132\26\7\20\0\4\7\3\0\3\7"+
    "\1\133\24\7\20\0\4\7\3\0\11\7\1\134\16\7"+
    "\20\0\4\7\3\0\3\7\1\135\24\7\20\0\4\7"+
    "\3\0\5\7\1\136\22\7\20\0\4\7\3\0\13\7"+
    "\1\134\14\7\20\0\4\7\3\0\11\7\1\137\16\7"+
    "\20\0\4\7\3\0\13\7\1\140\14\7\20\0\4\7"+
    "\3\0\25\7\1\103\2\7\20\0\4\7\3\0\11\7"+
    "\1\141\16\7\20\0\4\7\3\0\2\7\1\142\25\7"+
    "\20\0\4\7\3\0\11\7\1\143\16\7\20\0\4\7"+
    "\3\0\4\7\1\144\11\7\1\134\11\7\20\0\4\7"+
    "\3\0\6\7\1\145\6\7\1\146\12\7\20\0\4\7"+
    "\3\0\5\7\1\147\22\7\20\0\4\7\3\0\4\7"+
    "\1\150\23\7\20\0\4\7\3\0\11\7\1\151\1\7"+
    "\1\134\14\7\20\0\4\7\3\0\3\7\1\152\24\7"+
    "\20\0\4\7\3\0\4\7\1\110\23\7\20\0\4\7"+
    "\3\0\5\7\1\153\22\7\20\0\4\7\3\0\4\7"+
    "\1\154\23\7\20\0\4\7\3\0\1\7\1\155\26\7"+
    "\20\0\4\7\3\0\24\7\1\156\3\7\20\0\4\7"+
    "\3\0\15\7\1\157\12\7\20\0\4\7\3\0\11\7"+
    "\1\160\1\7\1\161\14\7\20\0\4\7\3\0\24\7"+
    "\1\162\3\7\20\0\4\7\3\0\16\7\1\163\11\7"+
    "\20\0\4\7\3\0\21\7\1\164\6\7\20\0\4\7"+
    "\3\0\13\7\1\165\14\7\20\0\4\7\3\0\6\7"+
    "\1\103\21\7\20\0\4\7\3\0\1\7\1\166\26\7"+
    "\20\0\4\7\3\0\2\7\1\57\25\7\20\0\4\7"+
    "\3\0\5\7\1\167\22\7\20\0\4\7\3\0\11\7"+
    "\1\170\16\7\20\0\4\7\3\0\15\7\1\171\12\7"+
    "\20\0\4\7\3\0\2\7\1\103\3\7\1\103\21\7"+
    "\20\0\4\7\3\0\12\7\1\172\15\7\20\0\4\7"+
    "\3\0\1\7\1\173\13\7\1\174\12\7\20\0\4\7"+
    "\3\0\1\175\27\7\20\0\4\7\3\0\15\7\1\176"+
    "\12\7\61\0\1\10\1\6\10\0\1\127\54\0\5\130"+
    "\1\177\55\130\1\200\1\177\51\130\6\0\4\7\3\0"+
    "\2\7\1\201\25\7\20\0\4\7\3\0\4\7\1\202"+
    "\23\7\20\0\4\7\3\0\3\7\1\103\24\7\20\0"+
    "\4\7\3\0\6\7\1\203\21\7\20\0\4\7\3\0"+
    "\22\7\1\103\5\7\20\0\4\7\3\0\3\7\1\204"+
    "\24\7\20\0\4\7\3\0\11\7\1\205\16\7\20\0"+
    "\4\7\3\0\15\7\1\206\12\7\20\0\4\7\3\0"+
    "\2\7\1\103\25\7\20\0\4\7\3\0\16\7\1\207"+
    "\11\7\20\0\4\7\3\0\5\7\1\210\22\7\20\0"+
    "\4\7\3\0\1\7\1\211\26\7\20\0\4\7\3\0"+
    "\13\7\1\103\14\7\20\0\4\7\3\0\11\7\1\212"+
    "\1\7\1\213\14\7\20\0\4\7\3\0\13\7\1\146"+
    "\14\7\20\0\4\7\3\0\12\7\1\214\15\7\20\0"+
    "\4\7\3\0\4\7\1\54\23\7\20\0\4\7\3\0"+
    "\12\7\1\215\15\7\20\0\4\7\3\0\11\7\1\216"+
    "\16\7\20\0\4\7\3\0\6\7\1\213\21\7\20\0"+
    "\4\7\3\0\3\7\1\110\24\7\20\0\4\7\3\0"+
    "\11\7\1\151\16\7\20\0\4\7\3\0\3\7\1\217"+
    "\24\7\20\0\4\7\3\0\11\7\1\220\16\7\20\0"+
    "\4\7\3\0\1\7\1\155\1\221\25\7\20\0\4\7"+
    "\3\0\1\176\27\7\20\0\4\7\3\0\4\7\1\222"+
    "\23\7\20\0\4\7\3\0\24\7\1\223\3\7\20\0"+
    "\4\7\3\0\4\7\1\213\23\7\20\0\4\7\3\0"+
    "\4\7\1\224\23\7\20\0\4\7\3\0\1\7\1\103"+
    "\26\7\20\0\4\7\3\0\17\7\1\103\10\7\20\0"+
    "\4\7\3\0\7\7\1\225\20\7\20\0\4\7\3\0"+
    "\11\7\1\226\16\7\20\0\4\7\3\0\23\7\1\152"+
    "\4\7\20\0\4\7\3\0\2\7\1\216\25\7\20\0"+
    "\4\7\3\0\2\7\1\134\25\7\12\0\4\130\1\127"+
    "\1\177\51\130\6\0\4\7\3\0\3\7\1\227\24\7"+
    "\20\0\4\7\3\0\7\7\1\103\20\7\20\0\4\7"+
    "\3\0\6\7\1\230\21\7\20\0\4\7\3\0\5\7"+
    "\1\231\22\7\20\0\4\7\3\0\6\7\1\232\21\7"+
    "\20\0\4\7\3\0\23\7\1\134\4\7\20\0\4\7"+
    "\3\0\6\7\1\233\21\7\20\0\4\7\3\0\13\7"+
    "\1\234\14\7\20\0\4\7\3\0\25\7\1\146\2\7"+
    "\20\0\4\7\3\0\15\7\1\235\12\7\20\0\4\7"+
    "\3\0\11\7\1\103\16\7\20\0\4\7\3\0\14\7"+
    "\1\103\13\7\20\0\4\7\3\0\14\7\1\236\13\7"+
    "\20\0\4\7\3\0\15\7\1\237\12\7\20\0\4\7"+
    "\3\0\6\7\1\240\21\7\20\0\4\7\3\0\4\7"+
    "\1\241\23\7\20\0\4\7\3\0\3\7\1\242\24\7"+
    "\20\0\4\7\3\0\16\7\1\243\11\7\20\0\4\7"+
    "\3\0\4\7\1\157\23\7\20\0\4\7\3\0\2\7"+
    "\1\244\25\7\20\0\4\7\3\0\4\7\1\245\23\7"+
    "\20\0\4\7\3\0\3\7\1\246\24\7\20\0\4\7"+
    "\3\0\4\7\1\233\23\7\20\0\4\7\3\0\15\7"+
    "\1\247\12\7\20\0\4\7\3\0\13\7\1\250\3\7"+
    "\1\146\10\7\20\0\4\7\3\0\4\7\1\251\23\7"+
    "\20\0\4\7\3\0\5\7\1\103\22\7\20\0\4\7"+
    "\3\0\15\7\1\252\12\7\20\0\4\7\3\0\5\7"+
    "\1\253\22\7\20\0\4\7\3\0\6\7\1\254\21\7"+
    "\20\0\4\7\3\0\12\7\1\103\15\7\20\0\4\7"+
    "\3\0\21\7\1\255\6\7\20\0\4\7\3\0\5\7"+
    "\1\256\22\7\20\0\4\7\3\0\27\7\1\257\20\0"+
    "\4\7\3\0\2\7\1\213\25\7\20\0\4\7\3\0"+
    "\2\7\1\260\25\7\20\0\4\7\3\0\22\7\1\134"+
    "\5\7\20\0\4\7\3\0\12\7\1\261\15\7\20\0"+
    "\4\7\3\0\17\7\1\134\10\7\20\0\4\7\3\0"+
    "\15\7\1\262\12\7\20\0\4\7\3\0\12\7\1\213"+
    "\15\7\20\0\4\7\3\0\3\7\1\263\24\7\20\0"+
    "\4\7\3\0\16\7\1\134\11\7\20\0\4\7\3\0"+
    "\1\7\1\264\26\7\20\0\4\7\3\0\4\7\1\265"+
    "\23\7\20\0\4\7\3\0\12\7\1\266\15\7\20\0"+
    "\4\7\3\0\3\7\1\267\24\7\20\0\4\7\3\0"+
    "\10\7\1\103\17\7\20\0\4\7\3\0\11\7\1\270"+
    "\16\7\20\0\4\7\3\0\1\7\1\233\26\7\20\0"+
    "\4\7\3\0\5\7\1\213\22\7\20\0\4\7\3\0"+
    "\5\7\1\271\22\7\20\0\4\7\3\0\12\7\1\134"+
    "\15\7\20\0\4\7\3\0\3\7\1\272\24\7\20\0"+
    "\4\7\3\0\5\7\1\273\22\7\20\0\4\7\3\0"+
    "\3\7\1\171\24\7\20\0\4\7\3\0\15\7\1\274"+
    "\12\7\20\0\4\7\3\0\1\7\1\275\26\7\20\0"+
    "\4\7\3\0\11\7\1\146\16\7\20\0\4\7\3\0"+
    "\26\7\1\270\1\7\20\0\4\7\3\0\21\7\1\103"+
    "\6\7\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\1\1\1\11\32\1\2\11"+
    "\1\1\2\0\52\1\2\11\1\1\1\11\2\0\45\1"+
    "\1\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  StringBuffer stringBuffer = new StringBuffer();


  public XtendLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public XtendLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1760) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { /**/
          }
        case 12: break;
        case 10: 
          { return XtendTypes.STRING;
          }
        case 13: break;
        case 6: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 14: break;
        case 7: 
          { yybegin(YYINITIAL); return XtendTypes.STRING;
          }
        case 15: break;
        case 9: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 16: break;
        case 8: 
          { return XtendTypes.KEYWORD;
          }
        case 17: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 18: break;
        case 4: 
          { yybegin(STRING);
          }
        case 19: break;
        case 11: 
          { return XtendTypes.COMMENT;
          }
        case 20: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 21: break;
        case 3: 
          { return XtendTypes.BUCHSTABEN;
          }
        case 22: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
